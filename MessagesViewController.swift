//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Harrison Wideman on 11/29/16.
//  Copyright Â© 2016 Tight. All rights reserved.
//

import UIKit
import Messages

/// Upcalls to important Messages framework functionality for "downstream" view management classes like MainViewController
protocol MessagesAppIntegrationProtocol
{
    func requestApplicationCompactPresentation()
    func requestApplicationExpandedPresentation()
    func getApplicationPresentationStyle() -> MSMessagesAppPresentationStyle
}

/// enum for application's interface states
enum EIMState {
    case InitApplication
    case ApplicationRoot
    case EmojiStickerSelect
    case EmojiSticker
    case EmojiCanvasStickerSelect
    case EmojiCanvasPreSelect
    case InitEmojiCanvas
    case EmojiCanvas
}

/// Use to keep track of current interface state
protocol EIMStateProtocol
{   var EIMState:EIMState{get set}
    var EIMStateChain:[EIMState]{get}
    /// Set current EIMState
    func setEIMState(_ state:EIMState)
    /// Get current EIMState
    func getEIMState() -> EIMState
    
    func rollBackStateChain(by steps:Int)
}

class MessagesViewController: MSMessagesAppViewController, MessagesAppIntegrationProtocol, EIMStateProtocol {
    /// MessagesAppIntegrationProtocol ///
    internal func requestApplicationCompactPresentation() {
        self.requestPresentationStyle( .compact )
    }
    
    internal func requestApplicationExpandedPresentation() {
        self.requestPresentationStyle( .expanded )
    }
    
    internal func getApplicationPresentationStyle() -> MSMessagesAppPresentationStyle {
        return self.presentationStyle
    }
    
    /// EIMStateProtocol ///
    internal var EIMState:EIMState = .InitApplication
    
    internal var EIMStateChain: [EIMState] = [.InitApplication]
    
    internal func getEIMStateChain() -> [EIMState]{
        return EIMStateChain
    }
    
    internal func setEIMState(_ state: EIMState) {
        EIMStateChain.append(state)
        self.EIMState = state
    }
    
    internal func getEIMState() -> EIMState {
        return self.EIMState
    }
    
    internal func rollBackStateChain(by steps: Int) {
        for _ in 1...steps {
            EIMStateChain.popLast()
        }
        
        setEIMState(EIMStateChain.last!)
    }
    
    var mainViewController:MainViewController?
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if (segue.identifier == "MainViewControllerEmbed"){
            mainViewController = segue.destination as? MainViewController
            mainViewController?.MessagesAppIntegrationDelegate = self
            mainViewController?.EIMStateDelegate = self
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        
        super.willBecomeActive(with: conversation)
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        super.didResignActive(with: conversation)
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        mainViewController?.clearView()
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        super.didReceive(message, conversation: conversation)
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        super.didStartSending(message, conversation: conversation)
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        super.didCancelSending(message, conversation: conversation)
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        super.willTransition(to: presentationStyle)
        // Called before the extension transitions to a new presentation style.
        self.view.layoutIfNeeded()
        self.mainViewController?.presentationStyleWillChange(to: presentationStyle)
        // Use this method to prepare for the change in presentation style.
        
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        super.didTransition(to: presentationStyle)
        // Called after the extension transitions to a new presentation style.
        self.view.layoutIfNeeded()
        self.mainViewController?.presentationStyleDidChange(to: presentationStyle)
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
